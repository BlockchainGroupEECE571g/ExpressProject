{"ast":null,"code":"import _objectSpread from \"C:\\\\571G\\\\ExpressProject\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"C:\\\\571G\\\\ExpressProject\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\571G\\\\ExpressProject\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\571G\\\\ExpressProject\\\\src\\\\components\\\\Receiver.js\";\nimport React, { Component } from 'react';\nimport Addressbar from './Addressbar';\nimport Express from '../abis/Express';\nimport Web3 from 'web3';\nimport Dialog from \"./Dialog\";\nimport './App.css';\nimport logo from '../images/logo.png';\nimport receiverImg from '../images/receiver.jpg';\n\nclass Receiver extends Component {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.state = {\n      account: '',\n      orders: [],\n      currentCourier: '',\n      statusMap: {\n        101: 'Waiting to be taken',\n        102: 'Waiting for delivery',\n        103: 'Delivered, waiting a confirmation',\n        104: 'Completed',\n        105: 'Cancelled'\n      },\n      loading2: false,\n      dialog: false,\n      message: []\n    };\n\n    this.confirmOrder = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_orderId) {\n        var gasAmount;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true\n              });\n\n              _context.next = 3;\n              return _this.state.deployedExpress.methods.confirmOrder(_orderId).estimateGas({\n                from: _this.state.account\n              });\n\n            case 3:\n              gasAmount = _context.sent;\n\n              _this.state.deployedExpress.methods.confirmOrder(_orderId).send({\n                from: _this.state.account,\n                gas: gasAmount\n              }).once('receipt', receipt => {\n                _this.setState({\n                  loading: false\n                });\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.makeGrade = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_orderId, _grade) {\n        var gasAmount;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _this.setState({\n                loading: true\n              });\n\n              _context2.next = 3;\n              return _this.state.deployedExpress.methods.makeGrade(_orderId, _grade).estimateGas({\n                from: _this.state.account\n              });\n\n            case 3:\n              gasAmount = _context2.sent;\n\n              _this.state.deployedExpress.methods.makeGrade(_orderId, _grade).send({\n                from: _this.state.account,\n                gas: gasAmount\n              }).once('receipt', receipt => {\n                _this.setState({\n                  loading: false\n                });\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    this.showInfo = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(senderName, senderPhone, pickupAddr, receiverName, receiverPhone, shippingAddr, receiver, startTime, endTime, orderWeight, orderType) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _this.setState({\n                loading2: true\n              });\n\n              _this.setState({\n                dialog: true,\n                message: [senderName, senderPhone, pickupAddr, receiverName, receiverPhone, shippingAddr, receiver, startTime, endTime, orderWeight, orderType],\n                loading2: false\n              });\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n\n      return function (_x4, _x5, _x6, _x7, _x8, _x9, _x10, _x11, _x12, _x13, _x14) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    this.closeDialog = () => {\n      this.setState({\n        dialog: false\n      });\n    };\n\n    this.Home = () => {\n      this.props.history.push({\n        pathname: '/'\n      });\n    };\n  }\n\n  componentDidMount() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _this2.getWeb3Provider();\n\n          case 2:\n            _context4.next = 4;\n            return _this2.connectToBlockchain();\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }))();\n  }\n\n  getWeb3Provider() {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!window.ethereum) {\n              _context5.next = 6;\n              break;\n            }\n\n            window.web3 = new Web3(window.ethereum);\n            _context5.next = 4;\n            return window.ethereum.enable();\n\n          case 4:\n            _context5.next = 7;\n            break;\n\n          case 6:\n            if (window.web3) {\n              window.web3 = new Web3(window.web3.currentProvider);\n            } else {\n              window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n            }\n\n          case 7:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }))();\n  }\n\n  connectToBlockchain() {\n    var _this3 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var web3, accounts, networkId, networkData, deployedExpress, totalNumber, i, order1, order2, order3, orderAll, currentCourier;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            web3 = window.web3;\n            _context6.next = 3;\n            return web3.eth.getAccounts();\n\n          case 3:\n            accounts = _context6.sent;\n\n            _this3.setState({\n              account: accounts[0]\n            });\n\n            _context6.next = 7;\n            return web3.eth.net.getId();\n\n          case 7:\n            networkId = _context6.sent;\n            networkData = Express.networks[networkId];\n\n            if (!networkData) {\n              _context6.next = 41;\n              break;\n            }\n\n            deployedExpress = new web3.eth.Contract(Express.abi, networkData.address);\n\n            _this3.setState({\n              deployedExpress: deployedExpress\n            });\n\n            _context6.next = 14;\n            return deployedExpress.methods.totalNumber().call();\n\n          case 14:\n            totalNumber = _context6.sent;\n\n            _this3.setState({\n              totalNumber\n            });\n\n            console.log('totalNumber', totalNumber);\n            i = 1;\n\n          case 18:\n            if (!(i <= totalNumber)) {\n              _context6.next = 33;\n              break;\n            }\n\n            _context6.next = 21;\n            return deployedExpress.methods.orders1(i).call();\n\n          case 21:\n            order1 = _context6.sent;\n            _context6.next = 24;\n            return deployedExpress.methods.orders2(i).call();\n\n          case 24:\n            order2 = _context6.sent;\n            _context6.next = 27;\n            return deployedExpress.methods.orders3(i).call();\n\n          case 27:\n            order3 = _context6.sent;\n            orderAll = _objectSpread({}, order1, {}, order2, {}, order3);\n\n            _this3.setState({\n              orders: [..._this3.state.orders, orderAll]\n            });\n\n          case 30:\n            i++;\n            _context6.next = 18;\n            break;\n\n          case 33:\n            console.log('myOrders', _this3.state.orders);\n            _context6.next = 36;\n            return deployedExpress.methods.couriers(accounts[0]).call();\n\n          case 36:\n            currentCourier = _context6.sent;\n\n            _this3.setState({\n              currentCourier: currentCourier\n            });\n\n            console.log('currentCourier', _this3.state.currentCourier);\n            _context6.next = 42;\n            break;\n\n          case 41:\n            window.alert('Express contract is not found in your blockchain.');\n\n          case 42:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }))();\n  }\n\n  render() {\n    var _this4 = this;\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Addressbar, {\n      account: this.state.account,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), ' ', \" \", this.state.dialog && React.createElement(Dialog, {\n      message: this.state.message,\n      closeDialog: this.closeDialog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), \" \", React.createElement(\"div\", {\n      className: \"container-fluid mt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"mybody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      onClick: this.Home.bind(this),\n      src: logo,\n      className: \"logoimg2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), \" \", React.createElement(\"img\", {\n      src: receiverImg,\n      className: \"logoimg5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), \" \", React.createElement(\"h2\", {\n      className: \"orderH\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \" All Orders To Be Confirmed \"), \" \"), \" \", React.createElement(\"div\", {\n      className: \"table1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      id: \"orderList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \" #OrderId \"), ' ', \" \", React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \" ParcelSender Name \"), ' ', \" \", React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \" Courier Address \"), ' ', \" \", React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \" Item Type \"), ' ', \" \", React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \" Delivery Confirm \"), ' ', \" \", React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \" Grade Courier \"), ' ', \" \"), ' ', \" \"), ' ', \" \", React.createElement(\"tbody\", {\n      id: \"orderList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \" \", ' ', \" \", this.state.orders.map((order, key) => {\n      return order.receiver == this.state.account ? React.createElement(\"tr\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        scope: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \" \", order.orderId.toString(), \" \"), ' ', \" \", React.createElement(\"th\", {\n        scope: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \" \", order.senderName, \" \"), ' ', \" \", React.createElement(\"th\", {\n        scope: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \" \", order.courier, \" \"), ' ', \" \", React.createElement(\"th\", {\n        scope: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \" \", order.orderType, \" \"), ' ', \" \", React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        name: order.orderId,\n        onClick: this.confirmOrder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"Confirm Order \", ' ', \" \"), ' ', \" \"), ' ', \" \", React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        name: order.orderId,\n        orderPrice: order.orderPrice,\n        onClick: this.makeGrade,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"Grade \", ' ', \" \"), ' ', \" \"), ' ', \" \") : null;\n    }), \" \", ' ', \" \"), ' ', \" \"), ' ', \" \"), \" \", React.createElement(\"h2\", {\n      className: \"orderRecordsH\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \" Your Confirmed Orders \"), ' ', \" \", React.createElement(\"table\", {\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      id: \"orderList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \" #OrderId \"), ' ', \" \", React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \" Order Status \"), ' ', \" \"), ' ', \" \"), ' ', \" \", React.createElement(\"tbody\", {\n      id: \"orderList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \" \", ' ', \" \", this.state.orders.map((order, key) => {\n      return order.orderStatus == '104' && order.receiver == this.state.account ? React.createElement(\"tr\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        scope: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, \" \", order.orderId.toString(), \" \"), ' ', \" \", React.createElement(\"th\", {\n        scope: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, \" \", ' ', \" \", this.state.statusMap[order.orderStatus], \" \", ' ', \" \"), ' ', \" \", React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, \" \", ' ', \" \", React.createElement(\"button\", {\n        className: \"showInfoButton\",\n        onClick: /*#__PURE__*/function () {\n          var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(event) {\n            return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n              while (1) switch (_context7.prev = _context7.next) {\n                case 0:\n                  _context7.next = 2;\n                  return _this4.showInfo(order.senderName, order.senderPhone, order.pickupAddr, order.receiverName, order.receiverPhone, order.shippingAddr, order.receiver, order.startTime, order.endTime, order.orderWeight, order.orderType);\n\n                case 2:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }, _callee7);\n          }));\n\n          return function (_x15) {\n            return _ref4.apply(this, arguments);\n          };\n        }(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, \"showInfo \", ' ', \" \"), \" \", ' ', \" \"), ' ', \" \") : null;\n    }), \" \", ' ', \" \"), ' ', \" \"), ' ', \" \"), \" \"), ' ', \" \");\n  }\n\n}\n\nexport default Receiver;","map":{"version":3,"sources":["C:/571G/ExpressProject/src/components/Receiver.js"],"names":["React","Component","Addressbar","Express","Web3","Dialog","logo","receiverImg","Receiver","state","account","orders","currentCourier","statusMap","loading2","dialog","message","confirmOrder","_orderId","setState","loading","deployedExpress","methods","estimateGas","from","gasAmount","send","gas","once","receipt","makeGrade","_grade","showInfo","senderName","senderPhone","pickupAddr","receiverName","receiverPhone","shippingAddr","receiver","startTime","endTime","orderWeight","orderType","closeDialog","Home","props","history","push","pathname","componentDidMount","getWeb3Provider","connectToBlockchain","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","networks","Contract","abi","address","totalNumber","call","console","log","i","orders1","order1","orders2","order2","orders3","order3","orderAll","couriers","render","bind","map","order","key","orderId","toString","courier","orderPrice","orderStatus","event"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Addressbar from './Addressbar'\nimport Express from '../abis/Express'\nimport Web3 from 'web3'\nimport Dialog from \"./Dialog\"\nimport './App.css'\nimport logo from '../images/logo.png'\nimport receiverImg from '../images/receiver.jpg'\n\nclass Receiver extends Component {\n    state = {\n        account: '',\n        orders: [],\n        currentCourier: '',\n        statusMap: {\n            101: 'Waiting to be taken',\n            102: 'Waiting for delivery',\n            103: 'Delivered, waiting a confirmation',\n            104: 'Completed',\n            105: 'Cancelled',\n        },\n        loading2: false,\n        dialog: false,\n        message: []\n    }\n\n    async componentDidMount() {\n        await this.getWeb3Provider()\n        await this.connectToBlockchain()\n    }\n\n    async getWeb3Provider() {\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereum.enable()\n        } else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider)\n        } else {\n            window.alert(\n                'Non-Ethereum browser detected. You should consider trying MetaMask!',\n            )\n        }\n    }\n\n    async connectToBlockchain() {\n        const web3 = window.web3\n        const accounts = await web3.eth.getAccounts()\n        this.setState({ account: accounts[0] })\n        const networkId = await web3.eth.net.getId()\n        const networkData = Express.networks[networkId]\n        if (networkData) {\n            const deployedExpress = new web3.eth.Contract(\n                Express.abi,\n                networkData.address,\n            )\n            this.setState({ deployedExpress: deployedExpress })\n            const totalNumber = await deployedExpress.methods.totalNumber().call()\n            this.setState({ totalNumber })\n            console.log('totalNumber', totalNumber)\n            for (var i = 1; i <= totalNumber; i++) {\n                const order1 = await deployedExpress.methods.orders1(i).call()\n                const order2 = await deployedExpress.methods.orders2(i).call()\n                const order3 = await deployedExpress.methods.orders3(i).call()\n                const orderAll = {...order1, ...order2, ...order3 }\n                this.setState({\n                    orders: [...this.state.orders, orderAll],\n                })\n            }\n            console.log('myOrders', this.state.orders)\n            const currentCourier = await deployedExpress.methods.couriers(accounts[0]).call();\n            this.setState({\n                currentCourier: currentCourier\n            })\n            console.log('currentCourier', this.state.currentCourier);\n\n        } else {\n            window.alert('Express contract is not found in your blockchain.')\n        }\n    }\n\n    confirmOrder = async(_orderId) => {\n        this.setState({ loading: true })\n        const gasAmount = await this.state.deployedExpress.methods\n            .confirmOrder(_orderId)\n            .estimateGas({ from: this.state.account })\n        this.state.deployedExpress.methods\n            .confirmOrder(_orderId)\n            .send({ from: this.state.account, gas: gasAmount })\n            .once('receipt', receipt => {\n                this.setState({ loading: false })\n            })\n    }\n\n    makeGrade = async(_orderId, _grade) => {\n        this.setState({ loading: true })\n        const gasAmount = await this.state.deployedExpress.methods\n            .makeGrade(_orderId, _grade)\n            .estimateGas({ from: this.state.account })\n        this.state.deployedExpress.methods\n            .makeGrade(_orderId, _grade)\n            .send({ from: this.state.account, gas: gasAmount })\n            .once('receipt', receipt => {\n                this.setState({ loading: false })\n            })\n    }\n\n\n    //open the dialog\n    showInfo = async(senderName, senderPhone, pickupAddr, receiverName, receiverPhone, shippingAddr, receiver, startTime, endTime, orderWeight, orderType) => {\n        this.setState({\n            loading2: true\n        })\n\n        this.setState({\n            dialog: true,\n            message: [senderName, senderPhone, pickupAddr, receiverName, receiverPhone, shippingAddr, receiver, startTime, endTime, orderWeight, orderType],\n            loading2: false\n        })\n\n    }\n\n    //close the dialog\n    closeDialog = () => {\n        this.setState({\n            dialog: false\n        })\n    }\n    Home = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n    render() {\n        return ( <\n            div >\n            <\n            Addressbar account = { this.state.account }\n            />{' '} {\n                this.state.dialog && < Dialog message = { this.state.message }\n                closeDialog = { this.closeDialog }\n                />} <\n                div className = \"container-fluid mt-5\" >\n                    <\n                    div className = \"mybody\" >\n                    <\n                    div className = \"title\" >\n                    <\n                    img\n                onClick = { this.Home.bind(this) }\n                src = { logo }\n                className = \"logoimg2\" >\n                    < /img> <\n                    img\n                src = { receiverImg }\n                className = \"logoimg5\" >\n                    < /img> <\n                    h2 className = \"orderH\" > All Orders To Be Confirmed < /h2> <\n                    /div> <\n                    div className = \"table1\" >\n                    <\n                    table className = \"table\" >\n                    <\n                    thead id = \"orderList\" >\n                    <\n                    tr >\n                    <\n                    th scope = \"col\" > #OrderId < /th>{' '} <\n                    th scope = \"col\" > ParcelSender Name < /th>{' '} <\n                    th scope = \"col\" > Courier Address < /th>{' '} <\n                    th scope = \"col\" > Item Type < /th>{' '} <\n                    th scope = \"col\" > Delivery Confirm < /th>{' '} <\n                    th scope = \"col\" > Grade Courier < /th>{' '} <\n                    /tr>{' '} <\n                    /thead>{' '} <\n                    tbody id = \"orderList\" > { ' ' } {\n                        this.state.orders.map((order, key) => {\n                            return order.receiver == this.state.account ? ( <\n                                tr key = { key } >\n                                <\n                                th scope = \"row\" > { order.orderId.toString() } < /th>{' '} <\n                                th scope = \"row\" > { order.senderName } < /th>{' '} <\n                                th scope = \"row\" > { order.courier } < /th>{' '} <\n                                th scope = \"row\" > { order.orderType } < /th>{' '} <\n                                td >\n                                <\n                                button name = { order.orderId }\n                                onClick = { this.confirmOrder } >\n                                Confirm Order { ' ' } <\n                                /button>{' '} <\n                                /td>{' '} <\n                                td >\n                                <\n                                button name = { order.orderId }\n                                orderPrice = { order.orderPrice }\n                                onClick = { this.makeGrade } >\n                                Grade { ' ' } <\n                                /button>{' '} <\n                                /td>{' '} <\n                                /tr>\n                            ) : null\n                        })\n                    } { ' ' } <\n                    /tbody>{' '} <\n                    /table>{' '} <\n                    /div> <\n                    h2 className = \"orderRecordsH\" > Your Confirmed Orders < /h2>{' '} <\n                    table className = \"table\" >\n                    <\n                    thead id = \"orderList\" >\n                    <\n                    tr >\n                    <\n                    th scope = \"col\" > #OrderId < /th>{' '} <\n                    th scope = \"col\" > Order Status < /th>{' '} <\n                    /tr>{' '} <\n                    /thead>{' '} <\n                    tbody id = \"orderList\" > { ' ' } {\n                        this.state.orders.map((order, key) => {\n                            return order.orderStatus == '104' && order.receiver == this.state.account ? ( <\n                                tr key = { key } >\n                                <\n                                th scope = \"row\" > { order.orderId.toString() } < /th>{' '} <\n                                th scope = \"row\" > { ' ' } { this.state.statusMap[order.orderStatus] } { ' ' } <\n                                /th>{' '} <\n                                td > { ' ' } <\n                                button className = \"showInfoButton\"\n                                onClick = {\n                                    async event => {\n\n                                        await this.showInfo(order.senderName, order.senderPhone, order.pickupAddr, order.receiverName, order.receiverPhone, order.shippingAddr, order.receiver, order.startTime, order.endTime, order.orderWeight, order.orderType)\n                                    }\n                                } >\n                                showInfo { ' ' } <\n                                /button> { ' ' } <\n                                /td>{' '} <\n                                /tr>\n                            ) : null\n                        })\n                    } { ' ' } <\n                    /tbody>{' '} <\n                    /table>{' '} <\n                    /div> <\n                    /div>{' '} <\n                    /div>\n            )\n        }\n\n    }\n\n    export default Receiver"]},"metadata":{},"sourceType":"module"}
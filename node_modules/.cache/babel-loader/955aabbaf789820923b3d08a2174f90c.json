{"ast":null,"code":"/*\r\n This file is part of web3.js.\r\n\r\n web3.js is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU Lesser General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n\r\n web3.js is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU Lesser General Public License for more details.\r\n\r\n You should have received a copy of the GNU Lesser General Public License\r\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n */\n\n/**\r\n * @file index.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\n\"use strict\";\n\nvar _ = require('underscore');\n\nvar core = require('web3-core');\n\nvar helpers = require('web3-core-helpers');\n\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\n\nvar Method = require('web3-core-method');\n\nvar utils = require('web3-utils');\n\nvar Net = require('web3-net');\n\nvar ENS = require('web3-eth-ens');\n\nvar Personal = require('web3-eth-personal');\n\nvar BaseContract = require('web3-eth-contract');\n\nvar Iban = require('web3-eth-iban');\n\nvar Accounts = require('web3-eth-accounts');\n\nvar abi = require('web3-eth-abi');\n\nvar getNetworkType = require('./getNetworkType.js');\n\nvar formatter = helpers.formatters;\n\nvar blockCall = function blockCall(args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\n};\n\nvar transactionFromBlockCall = function transactionFromBlockCall(args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};\n\nvar uncleCall = function uncleCall(args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};\n\nvar getBlockTransactionCountCall = function getBlockTransactionCountCall(args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};\n\nvar uncleCountCall = function uncleCountCall(args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};\n\nvar Eth = function Eth() {\n  var _this = this; // sets _requestmanager\n\n\n  core.packageInit(this, arguments); // overwrite setProvider\n\n  var setProvider = this.setProvider;\n\n  this.setProvider = function () {\n    setProvider.apply(_this, arguments);\n\n    _this.net.setProvider.apply(_this, arguments);\n\n    _this.personal.setProvider.apply(_this, arguments);\n\n    _this.accounts.setProvider.apply(_this, arguments);\n\n    _this.Contract.setProvider(_this.currentProvider, _this.accounts);\n  };\n\n  var handleRevert = false;\n  var defaultAccount = null;\n  var defaultBlock = 'latest';\n  var transactionBlockTimeout = 50;\n  var transactionConfirmationBlocks = 24;\n  var transactionPollingTimeout = 750;\n  var defaultChain, defaultHardfork, defaultCommon;\n  Object.defineProperty(this, 'handleRevert', {\n    get: function get() {\n      return handleRevert;\n    },\n    set: function set(val) {\n      handleRevert = val; // also set on the Contract object\n\n      _this.Contract.handleRevert = handleRevert; // update handleRevert\n\n      methods.forEach(function (method) {\n        method.handleRevert = handleRevert;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultCommon', {\n    get: function get() {\n      return defaultCommon;\n    },\n    set: function set(val) {\n      defaultCommon = val; // also set on the Contract object\n\n      _this.Contract.defaultCommon = defaultCommon; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.defaultCommon = defaultCommon;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultHardfork', {\n    get: function get() {\n      return defaultHardfork;\n    },\n    set: function set(val) {\n      defaultHardfork = val; // also set on the Contract object\n\n      _this.Contract.defaultHardfork = defaultHardfork; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.defaultHardfork = defaultHardfork;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultChain', {\n    get: function get() {\n      return defaultChain;\n    },\n    set: function set(val) {\n      defaultChain = val; // also set on the Contract object\n\n      _this.Contract.defaultChain = defaultChain; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.defaultChain = defaultChain;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'transactionPollingTimeout', {\n    get: function get() {\n      return transactionPollingTimeout;\n    },\n    set: function set(val) {\n      transactionPollingTimeout = val; // also set on the Contract object\n\n      _this.Contract.transactionPollingTimeout = transactionPollingTimeout; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.transactionPollingTimeout = transactionPollingTimeout;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'transactionConfirmationBlocks', {\n    get: function get() {\n      return transactionConfirmationBlocks;\n    },\n    set: function set(val) {\n      transactionConfirmationBlocks = val; // also set on the Contract object\n\n      _this.Contract.transactionConfirmationBlocks = transactionConfirmationBlocks; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.transactionConfirmationBlocks = transactionConfirmationBlocks;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'transactionBlockTimeout', {\n    get: function get() {\n      return transactionBlockTimeout;\n    },\n    set: function set(val) {\n      transactionBlockTimeout = val; // also set on the Contract object\n\n      _this.Contract.transactionBlockTimeout = transactionBlockTimeout; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.transactionBlockTimeout = transactionBlockTimeout;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultAccount', {\n    get: function get() {\n      return defaultAccount;\n    },\n    set: function set(val) {\n      if (val) {\n        defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));\n      } // also set on the Contract object\n\n\n      _this.Contract.defaultAccount = defaultAccount;\n      _this.personal.defaultAccount = defaultAccount; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.defaultAccount = defaultAccount;\n      });\n      return val;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultBlock', {\n    get: function get() {\n      return defaultBlock;\n    },\n    set: function set(val) {\n      defaultBlock = val; // also set on the Contract object\n\n      _this.Contract.defaultBlock = defaultBlock;\n      _this.personal.defaultBlock = defaultBlock; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.defaultBlock = defaultBlock;\n      });\n      return val;\n    },\n    enumerable: true\n  });\n  this.clearSubscriptions = _this._requestManager.clearSubscriptions; // add net\n\n  this.net = new Net(this.currentProvider); // add chain detection\n\n  this.net.getNetworkType = getNetworkType.bind(this); // add accounts\n\n  this.accounts = new Accounts(this.currentProvider); // add personal\n\n  this.personal = new Personal(this.currentProvider);\n  this.personal.defaultAccount = this.defaultAccount; // create a proxy Contract type for this instance, as a Contract's provider\n  // is stored as a class member rather than an instance variable. If we do\n  // not create this proxy type, changing the provider in one instance of\n  // web3-eth would subsequently change the provider for _all_ contract\n  // instances!\n\n  var self = this;\n\n  var Contract = function Contract() {\n    BaseContract.apply(this, arguments); // when Eth.setProvider is called, call packageInit\n    // on all contract instances instantiated via this Eth\n    // instances. This will update the currentProvider for\n    // the contract instances\n\n    var _this = this;\n\n    var setProvider = self.setProvider;\n\n    self.setProvider = function () {\n      setProvider.apply(self, arguments);\n      core.packageInit(_this, [self.currentProvider]);\n    };\n  };\n\n  Contract.setProvider = function () {\n    BaseContract.setProvider.apply(this, arguments);\n  }; // make our proxy Contract inherit from web3-eth-contract so that it has all\n  // the right functionality and so that instanceof and friends work properly\n\n\n  Contract.prototype = Object.create(BaseContract.prototype);\n  Contract.prototype.constructor = Contract; // add contract\n\n  this.Contract = Contract;\n  this.Contract.defaultAccount = this.defaultAccount;\n  this.Contract.defaultBlock = this.defaultBlock;\n  this.Contract.transactionBlockTimeout = this.transactionBlockTimeout;\n  this.Contract.transactionConfirmationBlocks = this.transactionConfirmationBlocks;\n  this.Contract.transactionPollingTimeout = this.transactionPollingTimeout;\n  this.Contract.handleRevert = this.handleRevert;\n  this.Contract.setProvider(this.currentProvider, this.accounts); // add IBAN\n\n  this.Iban = Iban; // add ABI\n\n  this.abi = abi; // add ENS\n\n  this.ens = new ENS(this);\n  var methods = [new Method({\n    name: 'getNodeInfo',\n    call: 'web3_clientVersion'\n  }), new Method({\n    name: 'getProtocolVersion',\n    call: 'eth_protocolVersion',\n    params: 0\n  }), new Method({\n    name: 'getCoinbase',\n    call: 'eth_coinbase',\n    params: 0\n  }), new Method({\n    name: 'isMining',\n    call: 'eth_mining',\n    params: 0\n  }), new Method({\n    name: 'getHashrate',\n    call: 'eth_hashrate',\n    params: 0,\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'isSyncing',\n    call: 'eth_syncing',\n    params: 0,\n    outputFormatter: formatter.outputSyncingFormatter\n  }), new Method({\n    name: 'getGasPrice',\n    call: 'eth_gasPrice',\n    params: 0,\n    outputFormatter: formatter.outputBigNumberFormatter\n  }), new Method({\n    name: 'getAccounts',\n    call: 'eth_accounts',\n    params: 0,\n    outputFormatter: utils.toChecksumAddress\n  }), new Method({\n    name: 'getBlockNumber',\n    call: 'eth_blockNumber',\n    params: 0,\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getBalance',\n    call: 'eth_getBalance',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n    outputFormatter: formatter.outputBigNumberFormatter\n  }), new Method({\n    name: 'getStorageAt',\n    call: 'eth_getStorageAt',\n    params: 3,\n    inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getCode',\n    call: 'eth_getCode',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getBlock',\n    call: blockCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, function (val) {\n      return !!val;\n    }],\n    outputFormatter: formatter.outputBlockFormatter\n  }), new Method({\n    name: 'getUncle',\n    call: uncleCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n    outputFormatter: formatter.outputBlockFormatter\n  }), new Method({\n    name: 'getBlockTransactionCount',\n    call: getBlockTransactionCountCall,\n    params: 1,\n    inputFormatter: [formatter.inputBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getBlockUncleCount',\n    call: uncleCountCall,\n    params: 1,\n    inputFormatter: [formatter.inputBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getTransaction',\n    call: 'eth_getTransactionByHash',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatter.outputTransactionFormatter\n  }), new Method({\n    name: 'getTransactionFromBlock',\n    call: transactionFromBlockCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n    outputFormatter: formatter.outputTransactionFormatter\n  }), new Method({\n    name: 'getTransactionReceipt',\n    call: 'eth_getTransactionReceipt',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatter.outputTransactionReceiptFormatter\n  }), new Method({\n    name: 'getTransactionCount',\n    call: 'eth_getTransactionCount',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'sendSignedTransaction',\n    call: 'eth_sendRawTransaction',\n    params: 1,\n    inputFormatter: [null]\n  }), new Method({\n    name: 'signTransaction',\n    call: 'eth_signTransaction',\n    params: 1,\n    inputFormatter: [formatter.inputTransactionFormatter]\n  }), new Method({\n    name: 'sendTransaction',\n    call: 'eth_sendTransaction',\n    params: 1,\n    inputFormatter: [formatter.inputTransactionFormatter],\n    abiCoder: abi\n  }), new Method({\n    name: 'sign',\n    call: 'eth_sign',\n    params: 2,\n    inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],\n    transformPayload: function transformPayload(payload) {\n      payload.params.reverse();\n      return payload;\n    }\n  }), new Method({\n    name: 'call',\n    call: 'eth_call',\n    params: 2,\n    inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter],\n    abiCoder: abi\n  }), new Method({\n    name: 'estimateGas',\n    call: 'eth_estimateGas',\n    params: 1,\n    inputFormatter: [formatter.inputCallFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'submitWork',\n    call: 'eth_submitWork',\n    params: 3\n  }), new Method({\n    name: 'getWork',\n    call: 'eth_getWork',\n    params: 0\n  }), new Method({\n    name: 'getPastLogs',\n    call: 'eth_getLogs',\n    params: 1,\n    inputFormatter: [formatter.inputLogFormatter],\n    outputFormatter: formatter.outputLogFormatter\n  }), new Method({\n    name: 'getChainId',\n    call: 'eth_chainId',\n    params: 0,\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'requestAccounts',\n    call: 'eth_requestAccounts',\n    params: 0,\n    outputFormatter: utils.toChecksumAddress\n  }), new Method({\n    name: 'getProof',\n    call: 'eth_getProof',\n    params: 3,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputStorageKeysFormatter, formatter.inputDefaultBlockNumberFormatter],\n    outputFormatter: formatter.outputProofFormatter\n  }), new Method({\n    name: 'getPendingTransactions',\n    call: 'eth_pendingTransactions',\n    params: 0,\n    outputFormatter: formatter.outputTransactionFormatter\n  }), // subscriptions\n  new Subscriptions({\n    name: 'subscribe',\n    type: 'eth',\n    subscriptions: {\n      'newBlockHeaders': {\n        // TODO rename on RPC side?\n        subscriptionName: 'newHeads',\n        // replace subscription with this name\n        params: 0,\n        outputFormatter: formatter.outputBlockFormatter\n      },\n      'pendingTransactions': {\n        subscriptionName: 'newPendingTransactions',\n        // replace subscription with this name\n        params: 0\n      },\n      'logs': {\n        params: 1,\n        inputFormatter: [formatter.inputLogFormatter],\n        outputFormatter: formatter.outputLogFormatter,\n        // DUBLICATE, also in web3-eth-contract\n        subscriptionHandler: function subscriptionHandler(output) {\n          if (output.removed) {\n            this.emit('changed', output);\n          } else {\n            this.emit('data', output);\n          }\n\n          if (_.isFunction(this.callback)) {\n            this.callback(null, output, this);\n          }\n        }\n      },\n      'syncing': {\n        params: 0,\n        outputFormatter: formatter.outputSyncingFormatter,\n        subscriptionHandler: function subscriptionHandler(output) {\n          var _this = this; // fire TRUE at start\n\n\n          if (this._isSyncing !== true) {\n            this._isSyncing = true;\n            this.emit('changed', _this._isSyncing);\n\n            if (_.isFunction(this.callback)) {\n              this.callback(null, _this._isSyncing, this);\n            }\n\n            setTimeout(function () {\n              _this.emit('data', output);\n\n              if (_.isFunction(_this.callback)) {\n                _this.callback(null, output, _this);\n              }\n            }, 0); // fire sync status\n          } else {\n            this.emit('data', output);\n\n            if (_.isFunction(_this.callback)) {\n              this.callback(null, output, this);\n            } // wait for some time before fireing the FALSE\n\n\n            clearTimeout(this._isSyncingTimeout);\n            this._isSyncingTimeout = setTimeout(function () {\n              if (output.currentBlock > output.highestBlock - 200) {\n                _this._isSyncing = false;\n\n                _this.emit('changed', _this._isSyncing);\n\n                if (_.isFunction(_this.callback)) {\n                  _this.callback(null, _this._isSyncing, _this);\n                }\n              }\n            }, 500);\n          }\n        }\n      }\n    }\n  })];\n  methods.forEach(function (method) {\n    method.attachToObject(_this);\n    method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)\n\n    method.defaultBlock = _this.defaultBlock;\n    method.defaultAccount = _this.defaultAccount;\n    method.transactionBlockTimeout = _this.transactionBlockTimeout;\n    method.transactionConfirmationBlocks = _this.transactionConfirmationBlocks;\n    method.transactionPollingTimeout = _this.transactionPollingTimeout;\n    method.handleRevert = _this.handleRevert;\n  });\n};\n\ncore.addProviders(Eth);\nmodule.exports = Eth;","map":{"version":3,"sources":["F:/documents/Desktop/ubccourse/EECE571g/express330/ExpressProject/node_modules/web3-eth/src/index.js"],"names":["_","require","core","helpers","Subscriptions","subscriptions","Method","utils","Net","ENS","Personal","BaseContract","Iban","Accounts","abi","getNetworkType","formatter","formatters","blockCall","args","isString","indexOf","transactionFromBlockCall","uncleCall","getBlockTransactionCountCall","uncleCountCall","Eth","_this","packageInit","arguments","setProvider","apply","net","personal","accounts","Contract","currentProvider","handleRevert","defaultAccount","defaultBlock","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","defaultChain","defaultHardfork","defaultCommon","Object","defineProperty","get","set","val","methods","forEach","method","enumerable","toChecksumAddress","inputAddressFormatter","clearSubscriptions","_requestManager","bind","self","prototype","create","constructor","ens","name","call","params","outputFormatter","hexToNumber","outputSyncingFormatter","outputBigNumberFormatter","inputFormatter","inputDefaultBlockNumberFormatter","numberToHex","inputBlockNumberFormatter","outputBlockFormatter","outputTransactionFormatter","outputTransactionReceiptFormatter","inputTransactionFormatter","abiCoder","inputSignFormatter","transformPayload","payload","reverse","inputCallFormatter","inputLogFormatter","outputLogFormatter","inputStorageKeysFormatter","outputProofFormatter","type","subscriptionName","subscriptionHandler","output","removed","emit","isFunction","callback","_isSyncing","setTimeout","clearTimeout","_isSyncingTimeout","currentBlock","highestBlock","attachToObject","setRequestManager","addProviders","module","exports"],"mappings":"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","sourcesContent":["/*\r\n This file is part of web3.js.\r\n\r\n web3.js is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU Lesser General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n\r\n web3.js is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU Lesser General Public License for more details.\r\n\r\n You should have received a copy of the GNU Lesser General Public License\r\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n/**\r\n * @file index.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\r\n\r\n\"use strict\";\r\n\r\nvar _ = require('underscore');\r\nvar core = require('web3-core');\r\nvar helpers = require('web3-core-helpers');\r\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\r\nvar Method = require('web3-core-method');\r\nvar utils = require('web3-utils');\r\nvar Net = require('web3-net');\r\n\r\nvar ENS = require('web3-eth-ens');\r\nvar Personal = require('web3-eth-personal');\r\nvar BaseContract = require('web3-eth-contract');\r\nvar Iban = require('web3-eth-iban');\r\nvar Accounts = require('web3-eth-accounts');\r\nvar abi = require('web3-eth-abi');\r\n\r\nvar getNetworkType = require('./getNetworkType.js');\r\nvar formatter = helpers.formatters;\r\n\r\n\r\nvar blockCall = function (args) {\r\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\r\n};\r\n\r\nvar transactionFromBlockCall = function (args) {\r\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\r\n};\r\n\r\nvar uncleCall = function (args) {\r\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\r\n};\r\n\r\nvar getBlockTransactionCountCall = function (args) {\r\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\r\n};\r\n\r\nvar uncleCountCall = function (args) {\r\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\r\n};\r\n\r\n\r\nvar Eth = function Eth() {\r\n    var _this = this;\r\n\r\n    // sets _requestmanager\r\n    core.packageInit(this, arguments);\r\n\r\n    // overwrite setProvider\r\n    var setProvider = this.setProvider;\r\n    this.setProvider = function () {\r\n        setProvider.apply(_this, arguments);\r\n        _this.net.setProvider.apply(_this, arguments);\r\n        _this.personal.setProvider.apply(_this, arguments);\r\n        _this.accounts.setProvider.apply(_this, arguments);\r\n        _this.Contract.setProvider(_this.currentProvider, _this.accounts);\r\n    };\r\n\r\n\r\n    var handleRevert = false;\r\n    var defaultAccount = null;\r\n    var defaultBlock = 'latest';\r\n    var transactionBlockTimeout = 50;\r\n    var transactionConfirmationBlocks = 24;\r\n    var transactionPollingTimeout = 750;\r\n    var defaultChain, defaultHardfork, defaultCommon;\r\n\r\n    Object.defineProperty(this, 'handleRevert', {\r\n        get: function () {\r\n            return handleRevert;\r\n        },\r\n        set: function (val) {\r\n            handleRevert = val;\r\n\r\n            // also set on the Contract object\r\n            _this.Contract.handleRevert = handleRevert;\r\n\r\n            // update handleRevert\r\n            methods.forEach(function(method) {\r\n                method.handleRevert = handleRevert;\r\n            });\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'defaultCommon', {\r\n        get: function () {\r\n            return defaultCommon;\r\n        },\r\n        set: function (val) {\r\n            defaultCommon = val;\r\n\r\n            // also set on the Contract object\r\n            _this.Contract.defaultCommon = defaultCommon;\r\n\r\n            // update defaultBlock\r\n            methods.forEach(function(method) {\r\n                method.defaultCommon = defaultCommon;\r\n            });\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'defaultHardfork', {\r\n        get: function () {\r\n            return defaultHardfork;\r\n        },\r\n        set: function (val) {\r\n            defaultHardfork = val;\r\n\r\n            // also set on the Contract object\r\n            _this.Contract.defaultHardfork = defaultHardfork;\r\n\r\n            // update defaultBlock\r\n            methods.forEach(function(method) {\r\n                method.defaultHardfork = defaultHardfork;\r\n            });\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'defaultChain', {\r\n        get: function () {\r\n            return defaultChain;\r\n        },\r\n        set: function (val) {\r\n            defaultChain = val;\r\n\r\n            // also set on the Contract object\r\n            _this.Contract.defaultChain = defaultChain;\r\n\r\n            // update defaultBlock\r\n            methods.forEach(function(method) {\r\n                method.defaultChain = defaultChain;\r\n            });\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'transactionPollingTimeout', {\r\n        get: function () {\r\n            return transactionPollingTimeout;\r\n        },\r\n        set: function (val) {\r\n            transactionPollingTimeout = val;\r\n\r\n            // also set on the Contract object\r\n            _this.Contract.transactionPollingTimeout = transactionPollingTimeout;\r\n\r\n            // update defaultBlock\r\n            methods.forEach(function(method) {\r\n                method.transactionPollingTimeout = transactionPollingTimeout;\r\n            });\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'transactionConfirmationBlocks', {\r\n        get: function () {\r\n            return transactionConfirmationBlocks;\r\n        },\r\n        set: function (val) {\r\n            transactionConfirmationBlocks = val;\r\n\r\n            // also set on the Contract object\r\n            _this.Contract.transactionConfirmationBlocks = transactionConfirmationBlocks;\r\n\r\n            // update defaultBlock\r\n            methods.forEach(function(method) {\r\n                method.transactionConfirmationBlocks = transactionConfirmationBlocks;\r\n            });\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'transactionBlockTimeout', {\r\n        get: function () {\r\n            return transactionBlockTimeout;\r\n        },\r\n        set: function (val) {\r\n            transactionBlockTimeout = val;\r\n\r\n            // also set on the Contract object\r\n            _this.Contract.transactionBlockTimeout = transactionBlockTimeout;\r\n\r\n            // update defaultBlock\r\n            methods.forEach(function(method) {\r\n                method.transactionBlockTimeout = transactionBlockTimeout;\r\n            });\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'defaultAccount', {\r\n        get: function () {\r\n            return defaultAccount;\r\n        },\r\n        set: function (val) {\r\n            if(val) {\r\n                defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));\r\n            }\r\n\r\n            // also set on the Contract object\r\n            _this.Contract.defaultAccount = defaultAccount;\r\n            _this.personal.defaultAccount = defaultAccount;\r\n\r\n            // update defaultBlock\r\n            methods.forEach(function(method) {\r\n                method.defaultAccount = defaultAccount;\r\n            });\r\n\r\n            return val;\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'defaultBlock', {\r\n        get: function () {\r\n            return defaultBlock;\r\n        },\r\n        set: function (val) {\r\n            defaultBlock = val;\r\n            // also set on the Contract object\r\n            _this.Contract.defaultBlock = defaultBlock;\r\n            _this.personal.defaultBlock = defaultBlock;\r\n\r\n            // update defaultBlock\r\n            methods.forEach(function(method) {\r\n                method.defaultBlock = defaultBlock;\r\n            });\r\n\r\n            return val;\r\n        },\r\n        enumerable: true\r\n    });\r\n\r\n\r\n    this.clearSubscriptions = _this._requestManager.clearSubscriptions;\r\n\r\n    // add net\r\n    this.net = new Net(this.currentProvider);\r\n    // add chain detection\r\n    this.net.getNetworkType = getNetworkType.bind(this);\r\n\r\n    // add accounts\r\n    this.accounts = new Accounts(this.currentProvider);\r\n\r\n    // add personal\r\n    this.personal = new Personal(this.currentProvider);\r\n    this.personal.defaultAccount = this.defaultAccount;\r\n\r\n    // create a proxy Contract type for this instance, as a Contract's provider\r\n    // is stored as a class member rather than an instance variable. If we do\r\n    // not create this proxy type, changing the provider in one instance of\r\n    // web3-eth would subsequently change the provider for _all_ contract\r\n    // instances!\r\n    var self = this;\r\n    var Contract = function Contract() {\r\n        BaseContract.apply(this, arguments);\r\n\r\n        // when Eth.setProvider is called, call packageInit\r\n        // on all contract instances instantiated via this Eth\r\n        // instances. This will update the currentProvider for\r\n        // the contract instances\r\n        var _this = this;\r\n        var setProvider = self.setProvider;\r\n        self.setProvider = function() {\r\n          setProvider.apply(self, arguments);\r\n          core.packageInit(_this, [self.currentProvider]);\r\n        };\r\n    };\r\n\r\n    Contract.setProvider = function() {\r\n        BaseContract.setProvider.apply(this, arguments);\r\n    };\r\n\r\n    // make our proxy Contract inherit from web3-eth-contract so that it has all\r\n    // the right functionality and so that instanceof and friends work properly\r\n    Contract.prototype = Object.create(BaseContract.prototype);\r\n    Contract.prototype.constructor = Contract;\r\n\r\n    // add contract\r\n    this.Contract = Contract;\r\n    this.Contract.defaultAccount = this.defaultAccount;\r\n    this.Contract.defaultBlock = this.defaultBlock;\r\n    this.Contract.transactionBlockTimeout = this.transactionBlockTimeout;\r\n    this.Contract.transactionConfirmationBlocks = this.transactionConfirmationBlocks;\r\n    this.Contract.transactionPollingTimeout = this.transactionPollingTimeout;\r\n    this.Contract.handleRevert = this.handleRevert;\r\n    this.Contract.setProvider(this.currentProvider, this.accounts);\r\n\r\n    // add IBAN\r\n    this.Iban = Iban;\r\n\r\n    // add ABI\r\n    this.abi = abi;\r\n\r\n    // add ENS\r\n    this.ens = new ENS(this);\r\n\r\n    var methods = [\r\n        new Method({\r\n            name: 'getNodeInfo',\r\n            call: 'web3_clientVersion'\r\n        }),\r\n        new Method({\r\n            name: 'getProtocolVersion',\r\n            call: 'eth_protocolVersion',\r\n            params: 0\r\n        }),\r\n        new Method({\r\n            name: 'getCoinbase',\r\n            call: 'eth_coinbase',\r\n            params: 0\r\n        }),\r\n        new Method({\r\n            name: 'isMining',\r\n            call: 'eth_mining',\r\n            params: 0\r\n        }),\r\n        new Method({\r\n            name: 'getHashrate',\r\n            call: 'eth_hashrate',\r\n            params: 0,\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'isSyncing',\r\n            call: 'eth_syncing',\r\n            params: 0,\r\n            outputFormatter: formatter.outputSyncingFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getGasPrice',\r\n            call: 'eth_gasPrice',\r\n            params: 0,\r\n            outputFormatter: formatter.outputBigNumberFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getAccounts',\r\n            call: 'eth_accounts',\r\n            params: 0,\r\n            outputFormatter: utils.toChecksumAddress\r\n        }),\r\n        new Method({\r\n            name: 'getBlockNumber',\r\n            call: 'eth_blockNumber',\r\n            params: 0,\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'getBalance',\r\n            call: 'eth_getBalance',\r\n            params: 2,\r\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\r\n            outputFormatter: formatter.outputBigNumberFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getStorageAt',\r\n            call: 'eth_getStorageAt',\r\n            params: 3,\r\n            inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]\r\n        }),\r\n        new Method({\r\n            name: 'getCode',\r\n            call: 'eth_getCode',\r\n            params: 2,\r\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]\r\n        }),\r\n        new Method({\r\n            name: 'getBlock',\r\n            call: blockCall,\r\n            params: 2,\r\n            inputFormatter: [formatter.inputBlockNumberFormatter, function (val) { return !!val; }],\r\n            outputFormatter: formatter.outputBlockFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getUncle',\r\n            call: uncleCall,\r\n            params: 2,\r\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\r\n            outputFormatter: formatter.outputBlockFormatter,\r\n\r\n        }),\r\n        new Method({\r\n            name: 'getBlockTransactionCount',\r\n            call: getBlockTransactionCountCall,\r\n            params: 1,\r\n            inputFormatter: [formatter.inputBlockNumberFormatter],\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'getBlockUncleCount',\r\n            call: uncleCountCall,\r\n            params: 1,\r\n            inputFormatter: [formatter.inputBlockNumberFormatter],\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'getTransaction',\r\n            call: 'eth_getTransactionByHash',\r\n            params: 1,\r\n            inputFormatter: [null],\r\n            outputFormatter: formatter.outputTransactionFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getTransactionFromBlock',\r\n            call: transactionFromBlockCall,\r\n            params: 2,\r\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\r\n            outputFormatter: formatter.outputTransactionFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getTransactionReceipt',\r\n            call: 'eth_getTransactionReceipt',\r\n            params: 1,\r\n            inputFormatter: [null],\r\n            outputFormatter: formatter.outputTransactionReceiptFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getTransactionCount',\r\n            call: 'eth_getTransactionCount',\r\n            params: 2,\r\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'sendSignedTransaction',\r\n            call: 'eth_sendRawTransaction',\r\n            params: 1,\r\n            inputFormatter: [null]\r\n        }),\r\n        new Method({\r\n            name: 'signTransaction',\r\n            call: 'eth_signTransaction',\r\n            params: 1,\r\n            inputFormatter: [formatter.inputTransactionFormatter]\r\n        }),\r\n        new Method({\r\n            name: 'sendTransaction',\r\n            call: 'eth_sendTransaction',\r\n            params: 1,\r\n            inputFormatter: [formatter.inputTransactionFormatter],\r\n            abiCoder: abi\r\n        }),\r\n        new Method({\r\n            name: 'sign',\r\n            call: 'eth_sign',\r\n            params: 2,\r\n            inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],\r\n            transformPayload: function (payload) {\r\n                payload.params.reverse();\r\n                return payload;\r\n            }\r\n        }),\r\n        new Method({\r\n            name: 'call',\r\n            call: 'eth_call',\r\n            params: 2,\r\n            inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter],\r\n            abiCoder: abi\r\n        }),\r\n        new Method({\r\n            name: 'estimateGas',\r\n            call: 'eth_estimateGas',\r\n            params: 1,\r\n            inputFormatter: [formatter.inputCallFormatter],\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'submitWork',\r\n            call: 'eth_submitWork',\r\n            params: 3\r\n        }),\r\n        new Method({\r\n            name: 'getWork',\r\n            call: 'eth_getWork',\r\n            params: 0\r\n        }),\r\n        new Method({\r\n            name: 'getPastLogs',\r\n            call: 'eth_getLogs',\r\n            params: 1,\r\n            inputFormatter: [formatter.inputLogFormatter],\r\n            outputFormatter: formatter.outputLogFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getChainId',\r\n            call: 'eth_chainId',\r\n            params: 0,\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'requestAccounts',\r\n            call: 'eth_requestAccounts',\r\n            params: 0,\r\n            outputFormatter: utils.toChecksumAddress\r\n        }),\r\n        new Method({\r\n            name: 'getProof',\r\n            call: 'eth_getProof',\r\n            params: 3,\r\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputStorageKeysFormatter, formatter.inputDefaultBlockNumberFormatter],\r\n            outputFormatter: formatter.outputProofFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getPendingTransactions',\r\n            call: 'eth_pendingTransactions',\r\n            params: 0,\r\n            outputFormatter: formatter.outputTransactionFormatter\r\n        }),\r\n\r\n        // subscriptions\r\n        new Subscriptions({\r\n            name: 'subscribe',\r\n            type: 'eth',\r\n            subscriptions: {\r\n                'newBlockHeaders': {\r\n                    // TODO rename on RPC side?\r\n                    subscriptionName: 'newHeads', // replace subscription with this name\r\n                    params: 0,\r\n                    outputFormatter: formatter.outputBlockFormatter\r\n                },\r\n                'pendingTransactions': {\r\n                    subscriptionName: 'newPendingTransactions', // replace subscription with this name\r\n                    params: 0\r\n                },\r\n                'logs': {\r\n                    params: 1,\r\n                    inputFormatter: [formatter.inputLogFormatter],\r\n                    outputFormatter: formatter.outputLogFormatter,\r\n                    // DUBLICATE, also in web3-eth-contract\r\n                    subscriptionHandler: function (output) {\r\n                        if(output.removed) {\r\n                            this.emit('changed', output);\r\n                        } else {\r\n                            this.emit('data', output);\r\n                        }\r\n\r\n                        if (_.isFunction(this.callback)) {\r\n                            this.callback(null, output, this);\r\n                        }\r\n                    }\r\n                },\r\n                'syncing': {\r\n                    params: 0,\r\n                    outputFormatter: formatter.outputSyncingFormatter,\r\n                    subscriptionHandler: function (output) {\r\n                        var _this = this;\r\n\r\n                        // fire TRUE at start\r\n                        if(this._isSyncing !== true) {\r\n                            this._isSyncing = true;\r\n                            this.emit('changed', _this._isSyncing);\r\n\r\n                            if (_.isFunction(this.callback)) {\r\n                                this.callback(null, _this._isSyncing, this);\r\n                            }\r\n\r\n                            setTimeout(function () {\r\n                                _this.emit('data', output);\r\n\r\n                                if (_.isFunction(_this.callback)) {\r\n                                    _this.callback(null, output, _this);\r\n                                }\r\n                            }, 0);\r\n\r\n                            // fire sync status\r\n                        } else {\r\n                            this.emit('data', output);\r\n                            if (_.isFunction(_this.callback)) {\r\n                                this.callback(null, output, this);\r\n                            }\r\n\r\n                            // wait for some time before fireing the FALSE\r\n                            clearTimeout(this._isSyncingTimeout);\r\n                            this._isSyncingTimeout = setTimeout(function () {\r\n                                if(output.currentBlock > output.highestBlock - 200) {\r\n                                    _this._isSyncing = false;\r\n                                    _this.emit('changed', _this._isSyncing);\r\n\r\n                                    if (_.isFunction(_this.callback)) {\r\n                                        _this.callback(null, _this._isSyncing, _this);\r\n                                    }\r\n                                }\r\n                            }, 500);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    ];\r\n\r\n    methods.forEach(function(method) {\r\n        method.attachToObject(_this);\r\n        method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)\r\n        method.defaultBlock = _this.defaultBlock;\r\n        method.defaultAccount = _this.defaultAccount;\r\n        method.transactionBlockTimeout = _this.transactionBlockTimeout;\r\n        method.transactionConfirmationBlocks = _this.transactionConfirmationBlocks;\r\n        method.transactionPollingTimeout = _this.transactionPollingTimeout;\r\n        method.handleRevert = _this.handleRevert;\r\n    });\r\n\r\n};\r\n\r\ncore.addProviders(Eth);\r\n\r\n\r\nmodule.exports = Eth;\r\n\r\n"]},"metadata":{},"sourceType":"script"}